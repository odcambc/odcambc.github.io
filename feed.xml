<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://odcambc.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://odcambc.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-13T07:59:02+00:00</updated><id>https://odcambc.github.io/feed.xml</id><title type="html">Christian B. Macdonald, Ph.D.</title><subtitle>Postdoctoral scholar at UCSF. </subtitle><entry><title type="html">Chain renaming in PyMOL</title><link href="https://odcambc.github.io/blog/2024/chain_renaming_pymol/" rel="alternate" type="text/html" title="Chain renaming in PyMOL"/><published>2024-06-06T10:32:13+00:00</published><updated>2024-06-06T10:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/chain_renaming_pymol</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/chain_renaming_pymol/"><![CDATA[<p>For some reason, I wanted to rename all the chains in a PyMOL session to be unique once. Here’s a script to do so.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">string</span> <span class="kn">import</span> <span class="n">ascii_uppercase</span>

<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">get_object_list</span><span class="p">():</span>\
    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">25</span><span class="p">:</span>\
        <span class="n">chain_id</span> <span class="o">=</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span> <span class="o">+</span> <span class="n">ascii_uppercase</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">26</span><span class="p">]</span>\
    <span class="k">else</span><span class="p">:</span>\
        <span class="n">chain_id</span> <span class="o">=</span> <span class="n">ascii_uppercase</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>\
    <span class="n">cmd</span><span class="p">.</span><span class="nf">alter</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">chain=</span><span class="se">\"</span><span class="si">{</span><span class="n">chain_id</span><span class="si">}</span><span class="se">\"</span><span class="sh">"</span><span class="p">)</span>\
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Renaming chains uniquely]]></summary></entry><entry><title type="html">De-spaghettification</title><link href="https://odcambc.github.io/blog/2024/fake_densities/" rel="alternate" type="text/html" title="De-spaghettification"/><published>2024-06-04T14:32:13+00:00</published><updated>2024-06-04T14:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/fake_densities</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/fake_densities/"><![CDATA[<p>Suppose you have, for whatever reason, a bunch of structures that you want to compare. If you have a couple, it’s easy enough to just look at them. What if you have a dozen? Or a thousand? Things become a bit harder. Take this, for example: here, I aligned about 100 various homologous proteins to a reference structure. It’s a bit of a mess.</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/spaghetti_1-480.webp 480w,/assets/img/posts/spaghetti_1-800.webp 800w,/assets/img/posts/spaghetti_1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/posts/spaghetti_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">Figure 1: a ball of spaghetti.</div> <p>It’s hard to really see what is conserved and what isn’t. To get around this, we can generate psuedo-densities from an aligned set of structures: here, the “density” is essentially (proportional) to a probability density for the overall fold. I think this is sort of cool! It also turns out it’s pretty easy to do. Here’s a short script that will do it for you and a few other instructions.</p> <p>First, align all your structures (duh). Then save them as a single combined PDB file. You can do this easily in PyMOL by choosing “File -&gt; Export Structure -&gt; Export Molecule,” changing the selection to “all” and saving as a PDB file. Make sure you’re writing all objects to one single file on the “Multi-File” tab.</p> <p>Let’s say you saved this as “all_structures.pdb.” You can use the following script to generate a density map from this file in DX format. Install MDAnalysis with <code class="language-plaintext highlighter-rouge">pip install MDAnalysis</code> if you haven’t already. Save this as “generate_density.py” or whatever, and and invoke it (for example) with <code class="language-plaintext highlighter-rouge">python generate_density.py -i all_structures.pdb -o density.dx</code>. You can change the sampling density with the <code class="language-plaintext highlighter-rouge">-d</code> flag.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">import</span> <span class="n">MDAnalysis</span> <span class="k">as</span> <span class="n">mda</span>
<span class="kn">import</span> <span class="n">MDAnalysis.analysis.density</span>

<span class="c1"># read in args from command line using argparse
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">This script will take a a pdb file and generate a pseduodensity map in dx format.</span><span class="sh">'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">-i</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--input</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">The input pdb file</span><span class="sh">'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">-o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--output</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">The name of the output dx file</span><span class="sh">'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">-d</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--delta</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">The grid spacing for sampling PDB density (in Angstroms), default is 0.5</span><span class="sh">'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--ca</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--CA</span><span class="sh">'</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">'</span><span class="s">store_true</span><span class="sh">'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Use CA (backbone) atoms only</span><span class="sh">'</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

<span class="n">input_file</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nb">input</span>
<span class="n">output_file</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">output</span>
<span class="n">delta</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">delta</span>

<span class="n">pdb_input</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="nc">Universe</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span>
<span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">ca</span><span class="p">:</span>
    <span class="n">pdb_atoms</span> <span class="o">=</span> <span class="n">pdb_input</span><span class="p">.</span><span class="nf">select_atoms</span><span class="p">(</span><span class="sh">'</span><span class="s">protein and backbone</span><span class="sh">'</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">pdb_atoms</span> <span class="o">=</span> <span class="n">pdb_input</span><span class="p">.</span><span class="nf">select_atoms</span><span class="p">(</span><span class="sh">'</span><span class="s">protein</span><span class="sh">'</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">MDAnalysis</span><span class="p">.</span><span class="n">analysis</span><span class="p">.</span><span class="n">density</span><span class="p">.</span><span class="nc">DensityAnalysis</span><span class="p">(</span><span class="n">pdb_atoms</span><span class="p">,</span> <span class="n">delta</span><span class="o">=</span><span class="n">delta</span><span class="p">)</span>
<span class="n">x</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
<span class="n">x</span><span class="p">.</span><span class="n">density</span><span class="p">.</span><span class="nf">convert_density</span><span class="p">(</span><span class="n">unit</span><span class="o">=</span><span class="sh">'</span><span class="s">Angstrom^{-3}</span><span class="sh">'</span><span class="p">)</span>
<span class="n">x</span><span class="p">.</span><span class="n">density</span><span class="p">.</span><span class="nf">export</span><span class="p">(</span><span class="n">output_file</span><span class="p">)</span>
</code></pre></div></div> <p>Use ChimeraX for the rest. Open the DX file as well as your reference structure. You’ll probably just see a bunch of dots for the map. That’s ok! Go to “Map -&gt; Smooth” and you should see something a little more…mapish. The reference structure will also probably not be aligned with the map. ChimeraX can fit, but it seems to need a little help to start. Move the reference structure until it looks reasonably close, then use “Map -&gt; Fit” to align them. You might need to fiddle but it should work.</p> <p>Play with the gaussian surface levels to get a view of the density. Also try different map styles: image is sort of neat.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/backlight_1-480.webp 480w,/assets/img/posts/backlight_1-800.webp 800w,/assets/img/posts/backlight_1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/posts/backlight_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/backlight_2-480.webp 480w,/assets/img/posts/backlight_2-800.webp 800w,/assets/img/posts/backlight_2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/posts/backlight_2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 2: Left, pseudo-density for single protein across all solved structures. Right, pseudo-density for protein across 100 homologous proteins, or de-spaghettification of Figure 1. </div> <p>Surface is a bit clearer, if not quite as pretty.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/surface_1-480.webp 480w,/assets/img/posts/surface_1-800.webp 800w,/assets/img/posts/surface_1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/posts/surface_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 3: Surface view of Figure 2 right, pseudo-density of Figure 1. </div>]]></content><author><name></name></author><summary type="html"><![CDATA[Making pseudo-densities]]></summary></entry><entry><title type="html">PyMOL mapping notes</title><link href="https://odcambc.github.io/blog/2024/more_pymol_notes/" rel="alternate" type="text/html" title="PyMOL mapping notes"/><published>2024-05-30T15:32:13+00:00</published><updated>2024-05-30T15:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/more_pymol_notes</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/more_pymol_notes/"><![CDATA[<p>Plotting things on a structure using PyMOL is fun but fiddly. You need to scale it yourself, and there isn’t a way to set a midpoint for a scale by default.</p> <p>Here is some code that will do that, assuming there are two models <code class="language-plaintext highlighter-rouge">model_A</code> and <code class="language-plaintext highlighter-rouge">model_B</code>, and the score is mapped to the b-factor of each. This will keep the midpoint at 0, and scale the negative and positive values independently while keeping the midpoint at 0. It will also add a scale at the bottom of the screen showing the scale.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">select</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span>
<span class="n">set_name</span> <span class="n">sele</span><span class="p">,</span><span class="n">positive</span>

<span class="n">select</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">0</span>
<span class="n">set_name</span> <span class="n">sele</span><span class="p">,</span><span class="n">negative</span>

<span class="c1"># These should be symmetric for proper scaling
</span><span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">negative</span> <span class="ow">and</span> <span class="n">model_A</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">positive</span> <span class="ow">and</span> <span class="n">model_A</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># Set this to the limits above
</span><span class="n">ramp_new</span> <span class="n">indel</span><span class="p">,</span> <span class="n">model_A</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="n">blue</span><span class="p">,</span> <span class="n">white</span><span class="p">,</span> <span class="n">red</span><span class="p">]</span>

<span class="c1"># These should be symmetric for proper scaling
</span><span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">negative</span> <span class="ow">and</span> <span class="n">model_B</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">positive</span> <span class="ow">and</span> <span class="n">model_B</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># Set this to the limits above
</span><span class="n">ramp_new</span> <span class="n">indel</span><span class="p">,</span> <span class="n">model_B</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="n">blue</span><span class="p">,</span> <span class="n">white</span><span class="p">,</span> <span class="n">red</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Reminders for pymol b factor spectrum mapping]]></summary></entry><entry><title type="html">Note to self</title><link href="https://odcambc.github.io/blog/2024/note-to-self/" rel="alternate" type="text/html" title="Note to self"/><published>2024-05-28T11:11:13+00:00</published><updated>2024-05-28T11:11:13+00:00</updated><id>https://odcambc.github.io/blog/2024/note-to-self</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/note-to-self/"><![CDATA[<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-1</span>
</code></pre></div></div> <p>I have spent an embarassingly long time coming up with regexes and <code class="language-plaintext highlighter-rouge">ls -l</code> to get a list of files in a directory. Turns out, <code class="language-plaintext highlighter-rouge">ls -1</code> is all I needed. Let’s hope I remember.</p>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[I learned something new about ls]]></summary></entry><entry><title type="html">Some one-liners</title><link href="https://odcambc.github.io/blog/2024/commands/" rel="alternate" type="text/html" title="Some one-liners"/><published>2024-05-25T15:32:13+00:00</published><updated>2024-05-25T15:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/commands</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/commands/"><![CDATA[<p>I find myself wrangling fastqs a lot. Here are some useful one-liners I’ve saved over time.</p> <p>To subsample the first 4000 reads of all the fastq.gz files in a directory and write them to a subdirectory:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="k">*</span> <span class="nt">-name</span> <span class="s2">"*.fastq.gz"</span> <span class="nt">-print</span> <span class="nt">-exec</span> sh <span class="nt">-c</span> <span class="s2">"zcat &lt; {} | head -n 4000 &gt; test/{}"</span> <span class="se">\;</span>
</code></pre></div></div> <p>To turn a multi-line fasta into a single line one:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">awk</span> <span class="s1">'/^&gt;/ {printf("\n%s\n",$0);next; } { printf("%s",$0);}  END {printf("\n");}'</span> file.fasta
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[Some fastq/fasta manipulations]]></summary></entry><entry><title type="html">Sanger to fastq</title><link href="https://odcambc.github.io/blog/2024/abi/" rel="alternate" type="text/html" title="Sanger to fastq"/><published>2024-05-25T11:32:13+00:00</published><updated>2024-05-25T11:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/abi</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/abi/"><![CDATA[<p>Sometimes we find ourselves with some Sanger data that we would like to use to prototype an NGS workflow. Here’s a script to turn a list of ab1 files into a single fastq file suitable for that.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">Bio</span> <span class="kn">import</span> <span class="n">SeqIO</span>

<span class="c1"># list of ab1 files
</span><span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">1.ab1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">2.ab1</span><span class="sh">"</span><span class="p">]</span>

<span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
    <span class="n">record</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">SeqIO</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="sh">"</span><span class="s">abi</span><span class="sh">"</span><span class="p">))</span>

<span class="n">SeqIO</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">records</span><span class="p">,</span> <span class="sh">"</span><span class="s">all_out.fastq</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">fastq</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[A quick script to convert ab1 files to fastq]]></summary></entry><entry><title type="html">OCT1 paper is out</title><link href="https://odcambc.github.io/blog/2024/oct1/" rel="alternate" type="text/html" title="OCT1 paper is out"/><published>2024-05-24T20:32:13+00:00</published><updated>2024-05-24T20:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/oct1</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/oct1/"><![CDATA[<p>Our paper on OCT1 (SLC22A1) is out in Molecular Cell. It’s been a lot of work and I’m glad it’s out.</p> <p>I wasted some time making a cover image. It didn’t get used for some reason, but it makes me laugh.</p> <div class="container"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/oct1_molecular-cell-cover-480.webp 480w,/assets/img/oct1_molecular-cell-cover-800.webp 800w,/assets/img/oct1_molecular-cell-cover-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/oct1_molecular-cell-cover.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Take a look at the nice <a href="https://www.cell.com/molecular-cell/issue?pii=S1097-2765(23)X0011-2#">actual art</a>, too.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[OCT1 paper is out]]></summary></entry><entry><title type="html">Some useful PyMOL defaults</title><link href="https://odcambc.github.io/blog/2024/pymol/" rel="alternate" type="text/html" title="Some useful PyMOL defaults"/><published>2024-05-24T20:32:13+00:00</published><updated>2024-05-24T20:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/pymol</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/pymol/"><![CDATA[<p>PyMOL defaults can be set using a .pymolrc file, which can be edited from the “File/Edit pymolrc” menu.</p> <p>Here’s mine: mostly taken from Ben McIlwain, a postdoc in Randy’s lab.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set cartoon_oval_width, 0.2
set cartoon_oval_length, 0.95

set ray_trace_mode,1
set spec_power, 150
set spec_direct,0.1
set ray_shadow,0

set use_shaders, 1
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[dot pymolrc]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://odcambc.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://odcambc.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://odcambc.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://odcambc.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://odcambc.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>