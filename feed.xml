<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://odcambc.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://odcambc.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-19T19:07:56+00:00</updated><id>https://odcambc.github.io/feed.xml</id><title type="html">Christian B. Macdonald, Ph.D.</title><subtitle>Postdoctoral scholar at UCSF. </subtitle><entry><title type="html">De-spaghettification</title><link href="https://odcambc.github.io/blog/2024/fake_densities/" rel="alternate" type="text/html" title="De-spaghettification"/><published>2024-06-04T14:32:13+00:00</published><updated>2024-06-04T14:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/fake_densities</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/fake_densities/"><![CDATA[<p>Suppose you have, for whatever reason, a bunch of structures that you want to compare. If you have a couple, it’s easy enough to just look at them. What if you have a dozen? Or a thousand? Things become a bit harder. Take this, for example: here, I aligned about 100 various homologous proteins to a reference structure. It’s a bit of a mess.</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/spaghetti_1-480.webp 480w,/assets/img/posts/spaghetti_1-800.webp 800w,/assets/img/posts/spaghetti_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/spaghetti_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">Figure 1: a ball of spaghetti.</div> <p>It’s hard to really see what is conserved and what isn’t. To get around this, we can generate psuedo-densities from an aligned set of structures: here, the “density” is essentially (proportional) to a probability density for the overall fold. I think this is sort of cool! It also turns out it’s pretty easy to do. Here’s a short script that will do it for you and a few other instructions.</p> <p>First, align all your structures (duh). Then save them as a single combined PDB file. You can do this easily in PyMOL by choosing “File -&gt; Export Structure -&gt; Export Molecule,” changing the selection to “all” and saving as a PDB file. Make sure you’re writing all objects to one single file on the “Multi-File” tab.</p> <p>Let’s say you saved this as “all_structures.pdb.” You can use the following script to generate a density map from this file in DX format. Install MDAnalysis with <code class="language-plaintext highlighter-rouge">pip install MDAnalysis</code> if you haven’t already. Save this as “generate_density.py” or whatever, and and invoke it (for example) with <code class="language-plaintext highlighter-rouge">python generate_density.py -i all_structures.pdb -o density.dx</code>. You can change the sampling density with the <code class="language-plaintext highlighter-rouge">-d</code> flag.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">import</span> <span class="n">MDAnalysis</span> <span class="k">as</span> <span class="n">mda</span>
<span class="kn">import</span> <span class="n">MDAnalysis.analysis.density</span>

<span class="c1"># read in args from command line using argparse
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">This script will take a a pdb file and generate a pseduodensity map in dx format.</span><span class="sh">'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">-i</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--input</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">The input pdb file</span><span class="sh">'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">-o</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--output</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">The name of the output dx file</span><span class="sh">'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">-d</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--delta</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">The grid spacing for sampling PDB density (in Angstroms), default is 0.5</span><span class="sh">'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">'</span><span class="s">--ca</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">--CA</span><span class="sh">'</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">'</span><span class="s">store_true</span><span class="sh">'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">Use CA (backbone) atoms only</span><span class="sh">'</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

<span class="n">input_file</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nb">input</span>
<span class="n">output_file</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">output</span>
<span class="n">delta</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">delta</span>

<span class="n">pdb_input</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="nc">Universe</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span>
<span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">ca</span><span class="p">:</span>
    <span class="n">pdb_atoms</span> <span class="o">=</span> <span class="n">pdb_input</span><span class="p">.</span><span class="nf">select_atoms</span><span class="p">(</span><span class="sh">'</span><span class="s">protein and backbone</span><span class="sh">'</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">pdb_atoms</span> <span class="o">=</span> <span class="n">pdb_input</span><span class="p">.</span><span class="nf">select_atoms</span><span class="p">(</span><span class="sh">'</span><span class="s">protein</span><span class="sh">'</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">MDAnalysis</span><span class="p">.</span><span class="n">analysis</span><span class="p">.</span><span class="n">density</span><span class="p">.</span><span class="nc">DensityAnalysis</span><span class="p">(</span><span class="n">pdb_atoms</span><span class="p">,</span> <span class="n">delta</span><span class="o">=</span><span class="n">delta</span><span class="p">)</span>
<span class="n">x</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
<span class="n">x</span><span class="p">.</span><span class="n">density</span><span class="p">.</span><span class="nf">convert_density</span><span class="p">(</span><span class="n">unit</span><span class="o">=</span><span class="sh">'</span><span class="s">Angstrom^{-3}</span><span class="sh">'</span><span class="p">)</span>
<span class="n">x</span><span class="p">.</span><span class="n">density</span><span class="p">.</span><span class="nf">export</span><span class="p">(</span><span class="n">output_file</span><span class="p">)</span>
</code></pre></div></div> <p>Use ChimeraX for the rest. Open the DX file as well as your reference structure. You’ll probably just see a bunch of dots for the map. That’s ok! Go to “Map -&gt; Smooth” and you should see something a little more…mapish. The reference structure will also probably not be aligned with the map. ChimeraX can fit, but it seems to need a little help to start. Move the reference structure until it looks reasonably close, then use “Map -&gt; Fit” to align them. You might need to fiddle but it should work.</p> <p>Play with the gaussian surface levels to get a view of the density. Also try different map styles: image is sort of neat.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/backlight_1-480.webp 480w,/assets/img/posts/backlight_1-800.webp 800w,/assets/img/posts/backlight_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/backlight_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/backlight_2-480.webp 480w,/assets/img/posts/backlight_2-800.webp 800w,/assets/img/posts/backlight_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/backlight_2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 2: Left, pseudo-density for single protein across all solved structures. Right, pseudo-density for protein across 100 homologous proteins, or de-spaghettification of Figure 1. </div> <p>Surface is a bit clearer, if not quite as pretty.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/surface_1-480.webp 480w,/assets/img/posts/surface_1-800.webp 800w,/assets/img/posts/surface_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/surface_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 3: Surface view of Figure 2 right, pseudo-density of Figure 1. </div>]]></content><author><name></name></author><summary type="html"><![CDATA[Making pseudo-densities]]></summary></entry><entry><title type="html">PyMOL mapping notes</title><link href="https://odcambc.github.io/blog/2024/more_pymol-copy/" rel="alternate" type="text/html" title="PyMOL mapping notes"/><published>2024-05-30T15:32:13+00:00</published><updated>2024-05-30T15:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/more_pymol%20copy</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/more_pymol-copy/"><![CDATA[<p>Plotting things on a structure using PyMOL is fun but fiddly. You need to scale it yourself, and there isn’t a way to set a midpoint for a scale by default.</p> <p>Here is some code that will do that, assuming there are two models <code class="language-plaintext highlighter-rouge">model_A</code> and <code class="language-plaintext highlighter-rouge">model_B</code>, and the score is mapped to the b-factor of each. This will keep the midpoint at 0, and scale the negative and positive values independently while keeping the midpoint at 0. It will also add a scale at the bottom of the screen showing the scale.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">select</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span>
<span class="n">set_name</span> <span class="n">sele</span><span class="p">,</span><span class="n">positive</span>

<span class="n">select</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">0</span>
<span class="n">set_name</span> <span class="n">sele</span><span class="p">,</span><span class="n">negative</span>

<span class="c1"># These should be symmetric for proper scaling
</span><span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">negative</span> <span class="ow">and</span> <span class="n">model_A</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">positive</span> <span class="ow">and</span> <span class="n">model_A</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># Set this to the limits above
</span><span class="n">ramp_new</span> <span class="n">indel</span><span class="p">,</span> <span class="n">model_A</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="n">blue</span><span class="p">,</span> <span class="n">white</span><span class="p">,</span> <span class="n">red</span><span class="p">]</span>

<span class="c1"># These should be symmetric for proper scaling
</span><span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">negative</span> <span class="ow">and</span> <span class="n">model_B</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">spectrum</span> <span class="n">b</span><span class="p">,</span> <span class="n">red_white_blue</span><span class="p">,</span> <span class="n">positive</span> <span class="ow">and</span> <span class="n">model_B</span><span class="p">,</span> <span class="n">minimum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># Set this to the limits above
</span><span class="n">ramp_new</span> <span class="n">indel</span><span class="p">,</span> <span class="n">model_B</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="n">blue</span><span class="p">,</span> <span class="n">white</span><span class="p">,</span> <span class="n">red</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Reminders for pymol b factor spectrum mapping]]></summary></entry><entry><title type="html">Note to self</title><link href="https://odcambc.github.io/blog/2024/note-to-self/" rel="alternate" type="text/html" title="Note to self"/><published>2024-05-28T11:11:13+00:00</published><updated>2024-05-28T11:11:13+00:00</updated><id>https://odcambc.github.io/blog/2024/note-to-self</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/note-to-self/"><![CDATA[<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-1</span>
</code></pre></div></div> <p>I have spent an embarassingly long time coming up with regexes and <code class="language-plaintext highlighter-rouge">ls -l</code> to get a list of files in a directory. Turns out, <code class="language-plaintext highlighter-rouge">ls -1</code> is all I needed. Let’s hope I remember.</p>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[I learned something new about ls]]></summary></entry><entry><title type="html">Some one-liners</title><link href="https://odcambc.github.io/blog/2024/commands/" rel="alternate" type="text/html" title="Some one-liners"/><published>2024-05-25T15:32:13+00:00</published><updated>2024-05-25T15:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/commands</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/commands/"><![CDATA[<p>I find myself wrangling fastqs a lot. Here are some useful one-liners I’ve saved over time.</p> <p>To subsample the first 4000 reads of all the fastq.gz files in a directory and write them to a subdirectory:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="k">*</span> <span class="nt">-name</span> <span class="s2">"*.fastq.gz"</span> <span class="nt">-print</span> <span class="nt">-exec</span> sh <span class="nt">-c</span> <span class="s2">"zcat &lt; {} | head -n 4000 &gt; test/{}"</span> <span class="se">\;</span>
</code></pre></div></div> <p>To turn a multi-line fasta into a single line one:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">awk</span> <span class="s1">'/^&gt;/ {printf("\n%s\n",$0);next; } { printf("%s",$0);}  END {printf("\n");}'</span> file.fasta
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[Some fastq/fasta manipulations]]></summary></entry><entry><title type="html">Sanger to fastq</title><link href="https://odcambc.github.io/blog/2024/abi/" rel="alternate" type="text/html" title="Sanger to fastq"/><published>2024-05-25T11:32:13+00:00</published><updated>2024-05-25T11:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/abi</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/abi/"><![CDATA[<p>Sometimes we find ourselves with some Sanger data that we would like to use to prototype an NGS workflow. Here’s a script to turn a list of ab1 files into a single fastq file suitable for that.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">Bio</span> <span class="kn">import</span> <span class="n">SeqIO</span>

<span class="c1"># list of ab1 files
</span><span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">1.ab1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">2.ab1</span><span class="sh">"</span><span class="p">]</span>

<span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
    <span class="n">record</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">SeqIO</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="sh">"</span><span class="s">abi</span><span class="sh">"</span><span class="p">))</span>

<span class="n">SeqIO</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">records</span><span class="p">,</span> <span class="sh">"</span><span class="s">all_out.fastq</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">fastq</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[A quick script to convert ab1 files to fastq]]></summary></entry><entry><title type="html">OCT1 paper is out</title><link href="https://odcambc.github.io/blog/2024/oct1/" rel="alternate" type="text/html" title="OCT1 paper is out"/><published>2024-05-24T20:32:13+00:00</published><updated>2024-05-24T20:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/oct1</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/oct1/"><![CDATA[<p>Our paper on OCT1 (SLC22A1) is out in Molecular Cell. It’s been a lot of work and I’m glad it’s out.</p> <p>I wasted some time making a cover image. It didn’t get used for some reason, but it makes me laugh.</p> <div class="container"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/oct1_molecular-cell-cover-480.webp 480w,/assets/img/oct1_molecular-cell-cover-800.webp 800w,/assets/img/oct1_molecular-cell-cover-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/oct1_molecular-cell-cover.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Take a look at the nice <a href="https://www.cell.com/molecular-cell/issue?pii=S1097-2765(23)X0011-2#">actual art</a>, too.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[OCT1 paper is out]]></summary></entry><entry><title type="html">Some useful PyMOL defaults</title><link href="https://odcambc.github.io/blog/2024/pymol/" rel="alternate" type="text/html" title="Some useful PyMOL defaults"/><published>2024-05-24T20:32:13+00:00</published><updated>2024-05-24T20:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/pymol</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/pymol/"><![CDATA[<p>PyMOL defaults can be set using a .pymolrc file, which can be edited from the “File/Edit pymolrc” menu.</p> <p>Here’s mine: mostly taken from Ben McIlwain, a postdoc in Randy’s lab.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set cartoon_oval_width, 0.2
set cartoon_oval_length, 0.95

set ray_trace_mode,1
set spec_power, 150
set spec_direct,0.1
set ray_shadow,0

set use_shaders, 1
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[dot pymolrc]]></summary></entry></feed>