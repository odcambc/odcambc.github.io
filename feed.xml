<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://odcambc.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://odcambc.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-28T16:10:11+00:00</updated><id>https://odcambc.github.io/feed.xml</id><title type="html">Christian B. Macdonald, Ph.D.</title><subtitle>Postdoctoral scholar at UCSF. </subtitle><entry><title type="html">Some one-liners</title><link href="https://odcambc.github.io/blog/2024/commands/" rel="alternate" type="text/html" title="Some one-liners"/><published>2024-05-25T15:32:13+00:00</published><updated>2024-05-25T15:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/commands</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/commands/"><![CDATA[<p>I find myself wrangling fastqs a lot. Here are some useful one-liners I’ve saved over time.</p> <p>To subsample the first 4000 reads of all the fastq.gz files in a directory and write them to a subdirectory:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="k">*</span> <span class="nt">-name</span> <span class="s2">"*.fastq.gz"</span> <span class="nt">-print</span> <span class="nt">-exec</span> sh <span class="nt">-c</span> <span class="s2">"zcat &lt; {} | head -n 4000 &gt; test/{}"</span> <span class="se">\;</span>
</code></pre></div></div> <p>To turn a multi-line fasta into a single line one:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">awk</span> <span class="s1">'/^&gt;/ {printf("\n%s\n",$0);next; } { printf("%s",$0);}  END {printf("\n");}'</span> file.fasta
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[Some fastq/fasta manipulations]]></summary></entry><entry><title type="html">Sanger to fastq</title><link href="https://odcambc.github.io/blog/2024/abi/" rel="alternate" type="text/html" title="Sanger to fastq"/><published>2024-05-25T11:32:13+00:00</published><updated>2024-05-25T11:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/abi</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/abi/"><![CDATA[<p>Sometimes we find ourselves with some Sanger data that we would like to use to prototype an NGS workflow. Here’s a script to turn a list of ab1 files into a single fastq file suitable for that.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">Bio</span> <span class="kn">import</span> <span class="n">SeqIO</span>

<span class="c1"># list of ab1 files
</span><span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">1.ab1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">2.ab1</span><span class="sh">"</span><span class="p">]</span>

<span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
    <span class="n">record</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">SeqIO</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="sh">"</span><span class="s">abi</span><span class="sh">"</span><span class="p">))</span>

<span class="n">SeqIO</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">records</span><span class="p">,</span> <span class="sh">"</span><span class="s">all_out.fastq</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">fastq</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[A quick script to convert ab1 files to fastq]]></summary></entry><entry><title type="html">OCT1 paper is out</title><link href="https://odcambc.github.io/blog/2024/oct1/" rel="alternate" type="text/html" title="OCT1 paper is out"/><published>2024-05-24T20:32:13+00:00</published><updated>2024-05-24T20:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/oct1</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/oct1/"><![CDATA[<p>Our paper on OCT1 (SLC22A1) is out in Molecular Cell. It’s been a lot of work and I’m glad it’s out.</p> <p>I wasted some time making a cover image. It didn’t get used for some reason, but it makes me laugh.</p> <div class="container"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/oct1_molecular-cell-cover-480.webp 480w,/assets/img/oct1_molecular-cell-cover-800.webp 800w,/assets/img/oct1_molecular-cell-cover-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/oct1_molecular-cell-cover.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Take a look at the nice <a href="https://www.cell.com/molecular-cell/issue?pii=S1097-2765(23)X0011-2#">actual art</a>, too.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[OCT1 paper is out]]></summary></entry><entry><title type="html">Some useful PyMOL defaults</title><link href="https://odcambc.github.io/blog/2024/pymol/" rel="alternate" type="text/html" title="Some useful PyMOL defaults"/><published>2024-05-24T20:32:13+00:00</published><updated>2024-05-24T20:32:13+00:00</updated><id>https://odcambc.github.io/blog/2024/pymol</id><content type="html" xml:base="https://odcambc.github.io/blog/2024/pymol/"><![CDATA[<p>PyMOL defaults can be set using a .pymolrc file, which can be edited from the “File/Edit pymolrc” menu.</p> <p>Here’s mine: mostly taken from Ben McIlwain, a postdoc in Randy’s lab.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set cartoon_oval_width, 0.2
set cartoon_oval_length, 0.95

set ray_trace_mode,1
set spec_power, 150
set spec_direct,0.1
set ray_shadow,0

set use_shaders, 1
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[dot pymolrc]]></summary></entry></feed>